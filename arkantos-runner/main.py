import pygame
from pygame.math import Vector2

WINDOW_SIZE     = (1280, 720)
GAME_WINDOW     = (320, 160)
TOP_LEFT        = (0, 0)
WHITE           = (255, 255, 255)
USEREVENT_COUNT = 0

def load_map(path):
    f = open(path + '.txt', 'r')
    data = f.read()
    f.close()
    data = data.split('\n')
    game_map = []
    for row in data:
        game_map.append(list(row))
    return game_map

def check_collision(rect, tiles):
    hit_list = []
    for tile in tiles:
        if rect.colliderect(tile):
            hit_list.append(tile)
    return hit_list

def move(rect, movement : Vector2, tiles):
    collision_types = {'top': False, 'bottom': False, 'right': False, 'left': False}
    # Check x and y one by one
    rect.x += movement.x
    hit_list = check_collision(rect, tiles)
    for tile in hit_list:
        if movement.x > 0:
            rect.right = tile.left
            collision_types['right'] = True
        elif movement.x < 0:
            rect.left = tile.right
            collision_types['left'] = True
    rect.y += movement.y
    hit_list = check_collision(rect, tiles)
    for tile in hit_list:
        if movement.y > 0:
            rect.bottom = tile.top
            collision_types['bottom'] = True
        if movement.y < 0:
            rect.top = tile.bottom
            collision_types['top'] = True
    return rect, collision_types

# Init
clock = pygame.time.Clock()
pygame.init()
pygame.display.set_caption('arkantos runner')
screen = pygame.display.set_mode(WINDOW_SIZE)
# For scaling
display = pygame.Surface((GAME_WINDOW))

# Load images
grabble_img     = pygame.image.load('assets/grabble.png')
grabble_rect    = grabble_img.get_rect()

ground_img      = pygame.image.load('assets/ground.png')
ground_rect     = ground_img.get_rect()

# Player graphics
player_frames = [
    pygame.image.load('assets/idle1.png').convert(),
    pygame.image.load('assets/run1.png').convert(),
    pygame.image.load('assets/run2.png').convert(),
    pygame.image.load('assets/run3.png').convert(),
    pygame.image.load('assets/run4.png').convert(),
    pygame.image.load('assets/run5.png').convert(),
    pygame.image.load('assets/run6.png').convert()]
for frame in player_frames:
    frame.set_colorkey(WHITE)
player_animation_idx = 0
player_surf         = player_frames[player_animation_idx]            
player_rect         = player_surf.get_rect(center = (50, 50))
player_flip         = False
player_action       = 'idle'

# Player variables
moving_left     = False
moving_right    = False
air_timer       = 0
player_y_momentum = 0

# Camera
true_camera = Vector2(0, 0)
camera      = Vector2(0, 0)
offset      = Vector2(152, 80)

# Game variables
GRAVITY     = 1
SPEED       = 2
JUMP        = 5
TILE_SIZE   = ground_img.get_width()

# Parallax background objects
background_objects = [[0.25,[120,10,70,400]],
[0.25,[280,30,40,400]],
[0.5,[30,40,40,400]],
[0.5,[130,90,100,400]],
[0.5,[300,80,120,400]]]

# Game map, generated by text file map.txt
map = load_map('map')

RUNANIMATION = pygame.USEREVENT + USEREVENT_COUNT
pygame.time.set_timer(RUNANIMATION, 120)
USEREVENT_COUNT += 1

while True:
    # Draw background every frame
    display.fill((146, 244, 255))

    # Update camera position
    true_camera.x += (player_rect.x - true_camera.x - offset.x) / 20 # The division is to make the true_camera smoother
    true_camera.y += (player_rect.y - true_camera.y - offset.y) / 20
    # Without this, the camera is pretty laggy. Some pixels here and there 
    # seem a tee bit off without it
    camera = true_camera
    camera.x = int(camera.x)
    camera.y = int(camera.y)

    # Parallax background effect
    pygame.draw.rect(display, (7, 80, 75), pygame.Rect(0, 120, 300, 80))
    for background_object in background_objects:
        obj_rect = pygame.Rect(background_object[1][0] - true_camera.x*background_object[0], background_object[1][1] - true_camera.y*background_object[0], background_object[1][2], background_object[1][3])
        if background_object[0] == 0.5:
            pygame.draw.rect(display, (14,222,150), obj_rect)
        else:
            pygame.draw.rect(display, (9,91,85), obj_rect)

    # Render map
    y = 0
    tile_rects = []
    for row in map:
        x = 0
        for tile in row:
            if tile == '1': # ground
                display.blit(ground_img, (x * TILE_SIZE - true_camera.x, y * TILE_SIZE - true_camera.y))
            if tile == '2': # grabble
                display.blit(grabble_img, (x * TILE_SIZE - true_camera.x, y * TILE_SIZE - true_camera.y))
            if tile != '0': # for collision
                tile_rects.append(pygame.Rect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE))
            x += 1 # Needed to draw in the right pos
        y += 1 #     ------------||------------------

    # Player movement
    player_movement = Vector2(0, 0)
    if moving_right:
        player_movement.x += SPEED
    if moving_left:
        player_movement.x -= SPEED
    # Affect player with gravity
    player_movement.y += player_y_momentum
    player_y_momentum += 0.2
    # Not to fall too fast
    if player_y_momentum > 3:
        player_y_momentum = 3

    # Player animation
    if player_movement.x < 0:
        player_flip = True
        player_action = 'run'
    if player_movement.x > 0:
        player_flip = False
        player_action = 'run'
    elif player_movement.x == 0:
        player_flip = False
        player_action = 'idle'

    player_rect, collisions = move(player_rect, player_movement, tile_rects)
    if collisions['bottom']:
        player_y_momentum = 0
        air_timer = 0
    else:
        air_timer += 1

    # Put player on screen
    display.blit(pygame.transform.flip(player_surf, player_flip, False), (player_rect.x - true_camera.x, player_rect.y - true_camera.y))

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_d:
                moving_right = True
            if event.key == pygame.K_a:
                moving_left = True
            if event.key == pygame.K_w:
                if air_timer < 6:
                    player_y_momentum -= JUMP
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_d:
                moving_right = False
            if event.key == pygame.K_a:
                moving_left = False
        if event.type == RUNANIMATION:
            if player_action != 'idle':
                if player_animation_idx < 5:
                    player_animation_idx += 1
                else:
                    player_animation_idx = 0
                player_surf = player_frames[player_animation_idx]
            else:
                player_surf = player_frames[0]
    
    # Scaling to desired size
    surf = pygame.transform.scale(display, WINDOW_SIZE)
    # Put new resolution on screen
    screen.blit(surf, TOP_LEFT)
    pygame.display.update()
    clock.tick(60) # FPS